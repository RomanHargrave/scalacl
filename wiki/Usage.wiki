#summary How to use ScalaCL in your projects


You can use the ScalaCLPlugin with *any of the following options* :

== With scalac (using sbaz) ==

If you're using [http://www.scala-lang.org/docu/files/tools/scalac.html scalac] in command line, the easiest way to test ScalaCL's compiler plugin is to use the following [http://www.scala-lang.org/node/93 sbaz] commands :
{{{
sbaz update
sbaz install scalacl-compiler-plugin
}}}
Then just use `scalac` as you're used to (the plugin will be enabled by default, see below for how to disable it).

Should you wish to uninstall the plugin, run :
{{{
sbaz remove scalacl-compiler-plugin
}}}

To update the plugin :
{{{
sbaz update
sbaz remove scalacl-compiler-plugin
sbaz install scalacl-compiler-plugin
}}}
Or if you don't care upgrading all your sbaz-managed packages :
{{{
sbaz update && sbaz upgrade
}}}

== With sbt (simple-build-tool) ==

To use the ScalaCL Compiler plugin with [http://code.google.com/p/simple-build-tool/ sbt], please make your project file look like this (`project/build/ScalaCLTest.scala`) :
{{{
import sbt._
class ScalaCLTest(info: ProjectInfo) extends DefaultProject(info) with AutoCompilerPlugins
{
  val nativelibs4javaRepo = "NativeLibs4Java Repository" at "http://nativelibs4java.sourceforge.net/maven/"
  val scalacl = compilerPlugin("com.nativelibs4java" % "scalacl-compiler-plugin" % "0.1") // or "1.0-SNAPSHOT" to get the latest development version
}
}}}
Then run this to grab the package (re-run each time you want to update to the latest version of ScalaCL) :
{{{
sbt update
}}}

== With Maven ==

The ScalaCL plugin can be used with [http://maven.apache.org/ Maven], simply edit your `pom.xml` as follows :
{{{
...
  <repositories>
    ...
    <repository>
      <id>nativelibs4java</id>
      <name>nativelibs4java Maven2 Repository</name>
      <url>http://nativelibs4java.sourceforge.net/maven</url>
    </repository>
  </repositories>
  <build>
    ...
    <plugins>
    	<plugin>
          <groupId>org.scala-tools</groupId>
          <artifactId>maven-scala-plugin</artifactId>
          <configuration>
            <compilerPlugins>
              <compilerPlugin>
                <groupId>com.nativelibs4java</groupId>
                <artifactId>scalacl-compiler</artifactId>
                <version>0.1</version>
                <!-- or "1.0-SNAPSHOT" to get the latest development version -->
              </compilerPlugin>
            </compilerPlugins>
          </configuration>
        </plugin>
    </plugins>
  </build>
...
}}}
Maven will automatically update the plugin to the latest available snapshot version each time you run it without the `-o` switch.

== With Eclipse ==

Here's how to configure an [http://www.scala-ide.org/ Eclipse Scala] project so it uses the ScalaCL Compiler Plugin :
  * Download the [http://nativelibs4java.sourceforge.net/maven/com/nativelibs4java/scalacl-compiler-plugin/0.1/scalacl-compiler-plugin-0.1.jar latest stable version of the ScalaCL Compiler Plugin] (or the [http://nativelibs4java.sourceforge.net/maven/com/nativelibs4java/scalacl-compiler-plugin/1.0-SNAPSHOT/scalacl-compiler-plugin-1.0-SNAPSHOT.jar latest development version])
  * Open the section "Scala Compiler Properties" of Eclipse project's properties
  * Check "Use Project Settings" to enable the configuration items below
  * Fill the `Xplugin` field with the full path to the JAR you've downloaded, for instance :
{{{
/Users/ochafik/ScalaCLPlugin/target/scalacl-compiler-plugin-xxx.jar
}}}
  * Fill the `Xplugin-require` field with `scalacl` (just in case)
  * Clean your project, so it is rebuilt with the plugin enabled (menu `Project / Clean...`)
In case of issue, it is advised you compile using Maven or scalac+sbaz, because it seems the output from the compiler and from the compiler plugin is not visible from Eclipse.

== Disable ScalaCL (collections and plugin) ==

The plugin is enabled by default. To disable it, set the environment variable DISABLE_SCALACL_PLUGIN to 1 :
{{{
DISABLE_SCALACL_PLUGIN=1 scalac ...
}}}

To disable optimizations for a whole file or at a specific line in a file, use the SCALACL_SKIP environment variable :
{{{
SCALACL_SKIP=file1,file2.scala,../path/to/file3.scala,file4:someLine,file5:someLine...
}}}
(this can be used to troubleshoot the ScalaCL Compiler Plugin : you can narrow compiler crashes down to the faulty line(s))