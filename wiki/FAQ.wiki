#summary ScalaCL's Frequently Asked Questions
#labels Featured
#sidebar TOCWiki
<wiki:toc max_depth="3" />

= What is ScalaCL ? =

Two things :
  * a [ScalaCLPlugin Scala compiler plugin] that optimizes general loops on arrays, lists and (inline) int ranges. For instance, the following code will run faster with [ScalaCLPlugin] :
{{{
for (i <- 0 to 10000)
  println(i)
}}}
  * a [ScalaCLCollections library of OpenCL-backed collections] that can run some of their operations directly on the GPU (mostly filter and map) :
{{{
import scalacl._
import scala.math._
implicit val context = new ScalaCLContext
val r = (0 to 1000000).cl // this is a CLRange
val a = r.toCLArray // this is a CLArray[Int]
val m = a.map(v => cos(v).toFloat) // run asynchronously on the GPU via OpenCL
println(m)
}}}

Please read [Usage] to know how to install/use ScalaCL in your projects.

= Most Scala expressions fail to be converted by the plugin... Which are supported ? =

For Scala to OpenCL code conversion, please see [CLConvertibleLanguageSubset this list of supported constructs].

= Why are ScalaCL Collections asynchronous ? What does it mean ? =

To the end user, [ScalaCLCollections] appear just as any other synchronous Scala collection. 

However, when you run `CLArray(1, 2, 3).map(_ + 1).map(_ * 2)`, the two map operations are not run synchronously. This means they might not have even been started yet !

The returned collection knows about which asynchronous operations are pending, and it will wait for them to complete if, say, you want to run `.toArray` on it.

= How do I know for sure that things worked well ? =

If you want to know what's happening (e.g. if there's an actual rewrite taking place during compilation or if the OpenCL collections actually schedule OpenCL kernels for execution), you can set the `SCALACL_VERBOSE` environment variable to `1` :
  * On Unix, Linux, MacOS X (bash) :
{{{
export SCALACL_VERBOSE=1
}}}
  * On Windows :
{{{
set SCALACL_VERBOSE=1
}}}

Also, you can ask `scalac` to show you the source after the [ScalaCLPlugin] transforms :
  * For general Scala collections transforms :
{{{
scalac Test.scala -Xprint:scalacl-loopstransform
}}}
  * For OpenCL collections transforms :
{{{
scalac Test.scala -Xprint:scalacl-functionstransform
}}}

= I don't get it : JavaCL is LGPL-licensed and ScalaCL is BSD-licensed ? =

Short answer : *don't worry, ScalaCL is BSD-licensed*.

The current main distribution of [http://code.google.com/p/javacl/ JavaCL] relies on JNA for its low-level bindings, and JNA is licensed under the LGPL license. The JNA version of JavaCL is hence released under the LGPL license for simplicity.

However, ScalaCL uses an alternate port of JavaCL that uses [http://code.google.com/p/bridj/ BridJ] as its underlying low-level binding technology instead of JNA, and BridJ is licensed under a BSD license, so this JavaCL port is itself under BSD and so is ScalaCL (please note that this is not a legal implication but a choice : being the author of BridJ, JNAerator, JavaCL and ScalaCL lets me a lot of licensing options :-)).

= Where can I get some help with ScalaCL ? =

  * On the [http://groups.google.com/group/nativelibs4java NativeLibs4Java user group].
  [http://code.google.com/p/nativelibs4java/ NativeLibs4Java] is the umbrella project of [http://code.google.com/p/javacl/ JavaCL], ScalaCL, [http://code.google.com/p/bridj/ BridJ] and [http://code.google.com/p/jnaerator/ JNAerator].
  * On [http://twitter.com/ochafik Twitter : @ochafik]