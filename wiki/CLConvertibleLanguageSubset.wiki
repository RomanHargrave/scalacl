#summary Details on which Scala constructs can be converted to OpenCL kernels

= Introduction =

Scala offers nice and varied syntactic constructs. Not all of them translate easily to C / OpenCL, so we had to pick the easiest + most useful.

= Constructs currently supported =

Right now you can use `scala.math` functions, use and create tuples and use simple if valued statements (without blocks) :
{{{
import scala.math._

val a: CLArray[Int] = 
  (1000 to 100000).toCLArray

// Tuples :
val r: CLIndexedSeq[(Int, Int)] = 
  a.zip(a.map(_ * 2)).zipWithIndex.map(t => (exp(t._1._1) + t._1._2 + t._2, t._1._1))

// Simple if expressions
val r2 = a.map(v => if (v < 0) v * 20 else v - 4)
}}}

= Constructs planned to be supported =

The translation engine is being rewritten to allow a much broader set of constructs :
{{{
import scala.math._

val a: CLArray[Int] = 
  (1000 to 100000).toCLArray

// Case-matching of tuples :
val r: CLIndexedSeq[(Int, Int)] = 
  a.zip(a.map(_ * 2)).zipWithIndex.map { case ((a, b), i) => (exp(a) + b + i, a) }

// Rich statements with blocks, filtered loops (at least on inline ranges) :
val extVal = 10
val r2 = arr.map(v => {
  var sum = { 
     val d = v - extVal 
     d * d
  }
  for (i <- 0 until extVal; if (i % 2) != 0) {
     sum += cos(v) * i
  }
  sum
})
}}}