#summary Details about collections provided by ScalaCL
#labels Featured
#sidebar TOCWiki
<wiki:toc max_depth="3" />

*Work in progress*

ScalaCL's collection use the [http://code.google.com/p/bridj/ BridJ] port of [http://code.google.com/p/javacl/ JavaCL], which has a much lower overhead than the regular JavaCL build (this helps improving BridJ, as new real-world use-cases emerge).

Reading and writing to / from collections hence uses the [http://nativelibs4java.sourceforge.net/sites/nl4j-runtime-parent/bridj/apidocs/org/bridj/Pointer.html BridJ Pointer class] rather than NIO Buffers, but it is trivial to wrap direct NIO Buffers as BridJ Pointers and vice-versa.

= `CLArray[T]` =

See [http://code.google.com/p/nativelibs4java/source/browse/branches/OpenCL-BridJ/libraries/OpenCL/ScalaCL2/src/main/scala/scalacl/CLArray.scala]

Supports :
  * T of AnyVal types and of tuples of AnyVals or tuples (unlimited nesting of tuples up to arity 8, with AnyVal leaves)
  * read/write from/to a BridJ [http://nativelibs4java.sourceforge.net/sites/nl4j-runtime-parent/bridj/apidocs/org/bridj/Pointer.html Pointer]
  * asynchronous map
  * asynchronous filter
  * asynchronous clone
  * respect of the order of read/write operations (attempting to read a buffer for which many write operations are still queued will block until these operations are completed)

A `CLArray[T]` is represented as an array of component buffers (tuples components are flattened). For instance the following array :
{{{
CLArray[(Int, Float, (Double, Long, (Byte, Short)))]
}}}
is represented as the following array of flattened component buffers :
{{{
Array[AnyRef](CLBuffer[Int], CLBuffer[Float], CLBuffer[Double], CLBuffer[Long], CLBuffer[Byte], CLBuffer[Short])
}}}

= `CLFilteredArray[T]` =

Composed of a `CLArray[T]` and a presence map (for now, a `CLArray[Boolean]`).

Supports
  * Same types as `CLArray[T]`
  * asynchronous map
  * asynchronous filter
  * size and toArray are computed using an intermediate prefix sum array (which still has to be greatly improved)

= `CLArrayView[T]` = 

Contains a reference to a `CLArray[T]` and a list of pending function applications (.map(f) and .filter(f) calls).

When forced, it attempts to creates a single OpenCL kernel that is un on the target array.

= `CLFilteredArrayView[T]` = 

Same as `CLArrayView[T]`, but for `CLFilteredArray[T]` instances

= `CLFunction[A, B]` =

Takes an A, returns a B (A and B can be tuples or `AnyVal`s).

One can create a `CLFunction` explicitely, but the best is to write a Scala function and let the [ScalaCLPlugin] translate it to a `CLFunction`.

Translation by the compiler plugin creates a unique identifier with which each function is cached globally.

Then each `CLFunction` can be instantiated (and cached) for a particular `ScalaCLContext` and specific input and output types.

Indeed it is possible to apply the same function on a `CLArray[T]` and on a `CLFilteredArray[T]`, even though this obviously requires different kernels (the filtered array contains a presence buffer that needs to be checked).

Function composition is also cached efficiently, using a cached composition graph (each function keeps track of the composed function that can be built from it using another function). This helps making `CLView`s efficient.