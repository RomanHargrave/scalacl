<wiki:toc max_depth="3" />

= Documentation =

  * Olivier Chafik's [http://scalacl.googlecode.com/svn/wiki/ScalaCL%20Scalathon%20Philadelphia%202011.pdf ScalaCL slides] from Scalathon's speech
  * Mirko Stocker's [http://scala-refactoring.org/wp-content/uploads/scala-refactoring.pdf Scala Refactoring] master's thesis contains lots of easy to understand documentation about the compiler's AST in its Appendix D.

= Hack =

== Compiler options ==

{{{
scalac -Xprint:typer test.scala
}}}


{{{
scalac -Xprint:typer -Yshow-trees test.scala
}}}

{{{
scalac -Ybrowse:typer test.scala
}}}

You can replace `typer` by any other phase, such as `scalacl-loopstransform`.

== Run the compiler ==

{{{
export SCALACL_TRACE=1
export SCALACL_VERBOSE=1

mvn scala:run -DmainClass=scalacl.plugin.Compile "-DaddArgs=Test.scala|-Xprint:scalacl-loopstransform|../ScalaCL/target/scalacl-0.3-SNAPSHOT-shaded.jar"
}}}

== Hacks leads ==

  * moving code generation from runtime library to compiler plugin : look for `println("sourceData = " + sourceData)` in `ScalaCLFunctionsTransformComponent.scala`
  * implementing the new design of loops rewriting : look for `StreamOps.scala` vs. `TraversalOps.scala` vs. `LoopsTransformComponent.scala`
  * side-effects detection (still completely broken) : see code in `CodeAnalysis.scala`
  * symmetry detection : copy paste code from side-effects detection and get going :-)
  * sbt migration : `sbt test` fails, `mvn test` succeeds (except for side effects tests)